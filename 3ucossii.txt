一.计算机操作系统的基本概念
操作系统是一种为应用程序提供服务的系统软件，是一个完整计算机系统的有机组成部分。

从层次来看，操作系统位于计算机硬件之上，应用软件之下。所以也把它叫做应用软件的运行平台。

应用软件
|
|
系统软件
|
|
操作系统 
|
|
计算机硬件系统

计算机操作系统的作用
1.它在计算机应用程序与计算机硬件系统之间，屏蔽了计算机硬件工作的一些细节，并对系统中的资源进行有效的管理。
2.通过提供函数（应用程序接口（API）），从而使应用程序的设计人员得以在一个友好的平台上进行应用程序的设计和开发，大大地提高了应用程序的开发效率。 

计算机操作系统的功能
I/O设备管理(设备表)
任务管理(任务表)
处理器的管理(任务表)
网络和通信的管理(任务表)
存储管理(存储分配表)
文件管理(文件目录)

二.操作系统中常用的数据结构
数组
1。同一数据类型数据的集合；
2。占用连续内存空间；
3。其中的所有元素名称都相同，但每个元素都有一个编号；
4。元素名去掉编号（下标），得到的是数组名，数组名是个指针。
使用上的特点：

1。分类存放；
2。检索速度快且恒定；
3。缺点：占用连续空间大
应用：记录同类事物的表

位图是数组的一种特殊应用

结构
struct Student{
  int age;
  char*name;
  char sex;
};

1。不同数据类型数据的集合；
2。占用连续内存空间；
使用上的特点：

1。不分类存放，但用来描述同一事物；
2。检索速度快且恒定；

应用：通讯录中的一条记录、
工具箱、厨房等等

链表
struct Student{
  Student*next
  int age;
  char*name;
  char sex;
};

1。同数据类型数据的集合；
2。不占用连续内存空间。
使用上的特点：

1。分类存放，但空间上不连续（不需要大量的连续存储空间）；
2。检索速度慢，且耗费的时间不固定；
应用：存放大量的较大
的表，类似档案柜


三.并发操作系统的概念
并发：由同一个处理器轮换地运行多个程序。或者说是由多个
程序轮班地占用处理器这个资源。且在占用这个资源期间，并不一定能够把程序运行完毕。

数据传送指令

子程序返回指令（由堆
栈弹出）

中断服务程序返回指令
（由堆栈弹出）

程序的切换
PC是个指路器，它指向哪
儿，处理器就去哪儿。

系统是通过把待运行程序的地址赋予程序计数器PC来实现程序的切换的。

四.任务的要素

任务的切换是任务运行环境的切换

任务控制块结构的主要成员
虚拟处理器应该存储的主要信息：
1。程序的断点地址（PC）
2。任务堆栈指针（SP）
3。程序状态字寄存器（PSW）
4。通用寄存器内容，这些内容通常保存在任务堆栈中，这些内容也常叫做任务的上下文。
5。函数调用信息（已存在于堆栈）




另外再用一个数据结构保存任务堆栈指针（SP），这个数据结构叫做任务
控制块，它除了保存任务堆栈指针之外还要负责保存任务其他信息。

任务控制块是由操作系统另行构造的一个数据结构，每个任务都有一个。

typedef struct os_tcb {
    OS_STK  *OSTCBStkPtr; 	//指向任务堆栈栈顶的指针
	……
    INT8U      	OSTCBStat;	//任务的当前状态标志
    INT8U     	OSTCBPrio; 	//任务的优先级别?
    ……
} OS_TCB; 


其实，程序切换的关键是把程序的私有堆栈指针赋予处理器的堆栈指针SP

实质上系统是通过SP的切换来实现程序的切换的。



要建立一个概念：具有控制块的程序才是一个
可以被系统所运行的任务。程序代码、私有堆栈、任
务控制块是任务的三要件。任务控制块提供了运行环境的存储位置。

把一个大型任务分解成多个小任务，然后在计算机中通过运行这些小任务，最终达到完成大任务的目的。
在μC/OS-II中，与上述那些小任务对应的程序实体就叫做“任务”（实质上是一个线程），μC/OS-II就是一个能对这些小任务的运行进行管理和调度的多任务操作系统。 

从应用程序设计的角度来看，μC/OS-II的任务就是一个用户编写的C函数和与之相关联的一些数据结构而构成的一个实体。 

获得待运行任务的任务控制块
|
处理器的SP=任务块中保存的SP
|
恢复待运行任务的运行环境
|
处理器的PC=任务堆栈中的断点地址

一个完整的任务应该有如下三部分：
任务代码（程序）
任务的私有堆栈（用以保护运行环境）
任务控制块（提供私有堆栈也是虚拟处理器的位置）

这些都是任务方应该提供的基本信息。


五. μC/OS-II的任务管理（任务调度）

等待状态：正在运行的任务，需要等待一段时间或需要等待一个事件发生再运行时，该任务就会把CPU的使用权让给别的任务而使任务进入等待状态。 
睡眠状态：任务在没有被配备任务控制块或被剥夺了任务控制块时的状态叫做任务的睡眠状态 
就绪状态：系统为任务配备了任务控制块且在任务就绪表中进行了就绪登记，这时任务的状态叫做就绪状态。 
运行状态：处于就绪状态的任务如果经调度器判断获得了CPU的使用权，则任务就进入运行状态 
中断服务状态：一个正在运行的任务一旦响应中断申请就会中止运行而去执行中断服务程序，这时任务的状态叫做中断服务状态 

任务控制块――任务在系统中的身份证

前面谈到，一个任务的任务控制块的主要作用就是保存该任务的虚拟
处理器的堆栈指针寄存器SP。其实，随着任务管理工作的复杂性
的提高，它还应该保存一些其他信息。

由于系统存在着多个任务，于是系统如何来识别并管理一个任务就是
一个需要解决的问题。识别一个任务的最直接的办法是为每一个任务起一
个名称。由于μC/OS-II中的任务都有一个惟一的优先级别，因此μC/OS-II是用
任务的优先级来作为任务的标识的。所以，任务控制块还要来保存该
任务的优先级别。

另外，前面也谈到，一个任务在不同的时刻还处于不同的状态，
显然，记录了任务状态的数据也应该保存到任务控制块中。

任务控制块结构的主要成员

typedef struct os_tcb {
    OS_STK  *OSTCBStkPtr; 	//指向任务堆栈栈顶的指针
   ……
    INT8U      	OSTCBStat;	//任务的当前状态标志
    INT8U     	OSTCBPrio; 	//任务的优先级别?
    ……
} OS_TCB; 

基于上述原因，系统必须为每个任务创建一个保存与该任务有关的相关信息的数据
结构，这个数据结构就叫做该任务的任务控制块（TCB）。



任务在内存中的结构
多个任务控制块组成了一个任务链表


用户任务代码的一般结构：

void MyTask(void *pdata)
{
    for (;;) 
   {
         可以被中断的用户代码；
         OS_ENTER_CRITICAL( )；//进入临界段（关中断）
         不可以被中断的用户代码；
         OS_EXIT_CRITICAL( )； 	//退出临界段（开中断）
         可以被中断的用户代码；
   }
} 
于是可以这样说，μC/OS-II任务的代码结构是一个可以带有临界段的无限循环。 

系统提供的空闲任务
在多任务系统运行时，系统经常会在某个时间内无用户任务可运行而处于所谓的空闲状态，
为了使CPU在没有用户任务可执行的时候有事可做，μC/OS-II提供了一个叫做空闲任务OSTaskIdle( )的系统任务 

void OSTaskIdle(void* pdata)
{
# if OS_CRITICAL_METHOD = = 3
	OS_CPU_SR cpu_sr;
#endif

	pdata = pdata;		//防止某些编译器报错
	for(;;)
	{
		OS_ENTER_CRITICAL( );//关闭中断
			OSdleCtr++;		//计数
		OS_EXIT_CRITICAL( );	//开放中断
	}
} 
空闲任务只是做了一个计数工作
注意！空闲任务中没有调用任务延时函数
μC/OS-II规定，一个用户应用程序必须使用这个空闲任务，而且这个任务是不能用软件来删除的 



系统提供的另一个任务――统计任务

μC/OS-II提供的另一个系统任务是统计任务OSTaskStat( )。
这个统计任务每秒计算一次CPU在单位时间内被使用的时间，
并把计算结果以百分比的形式存放在变量OSCPUsage中，
以便应用程序通过访问它来了解CPU的利用率，
所以这个系统任务OSTaskStat( )叫做统计任务 

 
任务的优先权及优先级别      

μC/OS_II 把任务的优先权分为64个优先级别，
每一个级别都用一个数字来表示。数字0表示任务的优先级别最高，
数字越大则表示任务的优先级别越低  

用户可以根据应用程序的需要，
在文件OS_CFG.H中通过给表示最低优先级别的常数OS_LOWEST_PRIO赋值的方法，
来说明应用程序中任务优先级别的数目。该常数一旦被定义，
则意味着系统中可供使用的优先级别为：0，1，2，……，OS_LOWEST_PRIO，共OS_LOWEST_PRIO+1个 


固定地，系统总是把最低优先级别OS_LOWEST_PRIO自动赋给空闲任务。
如果应用程序中还使用了统计任务，系统则会把优先级别OS_LOWEST_PRIO-1自动赋给统计任务，
因此用户任务可以使用的优先级别是：0，1，2…OS_LOWEST_PRIO-2，共OS_LOWEST_PRIO-1个 

      
任  务  堆  栈
保存CPU寄存器中的内容及存储任务私有数据的需要，每个任务都应该配有自己的堆栈，
任务堆栈是任务的重要的组成部分 

在应用程序中定义任务堆栈的栈区非常简单，即定义一个OS_STK类型的一个数组并在创建一个任务时把这个数组的地址赋给该任务就可以了。
例如：
//定义堆栈的长度
#define	TASK_STK_SIZE	 512

//定义一个数组来作为任务堆栈
OS_STK TaskStk[TASK_STK_SIZE];	

typedef  unsigned  int   OS_STK;
//这是系统定义的一个数据类型 

       
void main(void)
{
	……
	OSTaskCreate(
		MyTask, 		//任务的指针
		&MyTaskAgu, 	//传递给任务的参数
		& MyTaskStk[MyTaskStkN-1],//任务堆栈栈顶地址
		20				//任务的优先级别
	);
	……
}
在创建用户任务时，要传递任务的堆栈指针和任务优先级别

	   
使用函数OSTaskCreate( )创建任务时，一定要注意所使用的处理器对堆栈增长方向的支持是向上的还是向下的 

任务堆栈的初始化：
应用程序在创建一个新任务的时候，必须把在系统启动这个任务时CPU各寄存器所需要的初始数据（任务指针、任务堆栈指针、程序状态字等等），事先存放在任务的堆栈中 
μC/OS-II在创建任务函数OSTaskCreate( )中通过调用任务堆栈初始化函数OSTaskStkInit( )来完成任务堆栈初始化工作的 
由于各种处理器的寄存器及对堆栈的操作方式不尽相同，因此该函数需要用户在进行μC/OS-II的移植时，按所使用的处理器由用户来编写。实现这个函数的具体细节，将在本书有关μC/OS-II移植的章节中做进
一步的介绍
其实，任务堆栈的初始化就是对该任务的虚拟处理器的初始化（复位）。


它的原型如下：
OS_STK *OSTaskStkInit(
		void (*task)(void *pd),  
		void *pdato, 				       
		OS_STK *ptos, 
		INT16U opt
		)；


任务控制块(OS_TCB)及任务控制块链表
μC/OS-II用来记录任务的堆栈指针、任务的当前状态、任务的优先级别等一些与任务管理有关的属性的表就叫做任务控制块 
任务控制块结构的主要成员

typedef struct os_tcb {
    OS_STK  *OSTCBStkPtr; //指向任务堆栈栈顶的指针
	……
   struct os_tcb *OSTCBNext;//指向后一个任务控制块的指针
    struct os_tcb *OSTCBPrev; //指向前一个任务控制块的指针

   ……
    INT16U    	OSTCBDly; 	//任务等待的时限（节拍数）
    INT8U      	OSTCBStat;	//任务的当前状态标志
    INT8U     	OSTCBPrio; 	//任务的优先级别

    ……
} OS_TCB; 
当应用程序调用函数OSTaskCreate( )创建一个任务时，这个函数会调用系统函数OSTCBInit ( )来为任务控制块进行初始化。
这个函数首先为被创建任务从空任务控制块链表获取一个任务控制块，
然后用任务的属性对任务控制块各个成员进行赋值，最后再把这个任务控制块链入到任务控制块链表的头部 

	
当进行系统初始化时，初始化函数会按用户提供的任务数为系统创建具有相应数量的任务控制块并把它们链接为一个链表。
由于这些任务控制块还没有对应的任务，故这个链表叫做空任务块链表。即相当于是一些空白的身份证。
 
多任务操作系统的核心工作就是任务调度。
所谓调度，就是通过一个算法在多个任务中确定该运行的任务，做这项工作的函数就叫做调度器。
μC/OS_II进行任务调度的思想是 “近似地每时每刻总是让优先级最高的就绪任务处于运行状态” 。
为了保证这一点，它在系统或用户任务调用系统函数及执行中断服务程序结束时总是调用调度器，
来确定应该运行的任务并运行它 。



μC/OS_II进行任务调度的依据就是任务就绪表 

为了能够使系统清楚地知道，系统中哪些任务已经就绪，哪些还没有就绪，
μC/OS_II在RAM中设立了一个记录表，系统中的每个任务都在这个表中占据一个位置，
并用这个位置的状态（1或者0）来表示任务是否处于就绪状态，
这个表就叫做任务就绪状态表，简称叫任务就绪表 







六. μC/OS-II的中断和时钟
七. μC/OS-II的任务的同步与通信
八. μC/OS-II的存储管理
九.硬件抽象层和测试台
